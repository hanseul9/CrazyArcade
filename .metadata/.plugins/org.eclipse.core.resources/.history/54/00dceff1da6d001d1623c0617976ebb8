import java.awt.Canvas;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.MediaTracker;
import java.awt.Toolkit;

public class GameScreen extends Canvas {
	//실제 게임의 메인 제어를 행하는 클래스
	//가급적 화면 출력에서는 게임에서 공통으로 쓰이는 변수값의 변경 등을 행하지 않는 것이 좋다.
	
	ArcadeClientGameView  main;
	int cnt;
	int gamecnt; //게임 흐름
	
	
	//화면 그리기용 변수
	int x,y;//플레이어 캐릭터의 좌표
	
	int bx, by;//블럭의 좌표
	
	Image dblbuff;//더블버퍼링용 백버퍼
	Graphics gc;//더블버퍼링용 그래픽 컨텍스트
	
	Image bg; //배경화면
	
	Image block[]=new Image[12];
	
	
	
	//아이템들
	Image Bmax[]=new Image[4]; //물풍선 최대 개수 증가 아이템
	Image Bpower[]=new Image[4]; //물줄기 증가 아이템
	Image speed[]=new Image[4]; //플레이어 속도 증가 아이템
	
	
	
	
	Image bubble[] = new Image[4]; //물풍선
	//Image pop[] = new Image[10]; //터진 물풍선(일단 나중에)
	
	Image chr;
	Image chrUp[] = new Image[8];
	Image chrDown[] = new Image[8];
	Image chrLeft[] = new Image[6];
	Image chrRight[] = new Image[6];
	Image chrTrap[] = new Image [13];
	
	Image waterPop[] = new Image[6];
	Image waterUpM[] = new Image[11];
	Image waterUpE[] = new Image[11];
	Image waterDownM[] = new Image[11];
	Image waterDownE[] = new Image[11];
	Image waterLeftM[] = new Image[11];
	Image waterLeftE[] = new Image[11];
	Image waterRightM[] = new Image[11];
	Image waterRightE[] = new Image[11];
	
	int waterCnt=5;
	
	Font font;
	

    GameScreen(ArcadeClientGameView main) {
        this.main = main;
        this.font = new Font("Default", 0, 9);
    }
    
    public void paint(Graphics g) {
        if (this.gc == null) {
        	//더블 버퍼링용 오프스크린 버퍼 생성. 필히 paint 함수 내에서 해 줘야 한다. 그렇지 않으면 null이 반환된다.
            this.dblbuff = this.createImage(this.main.gScreenWidth, this.main.gScreenHeight);
            
            if (this.dblbuff == null) {
                System.out.println("오프스크린 버퍼 생성 실패");
            } else {
                this.gc = this.dblbuff.getGraphics();//오프스크린 버퍼에 그리기 위한 그래픽 컨텍스트 획득
            }

        } else {
            this.update(g);
        }
    }
    
    
    public void update(Graphics g) {//화면 깜박거림을 줄이기 위해, 
    								//paint에서 화면을 바로 묘화하지 않고 update 메소드를 호출하게 한다.
        this.cnt = this.main.cnt;
        this.gamecnt = this.main.gamecnt;
        if (this.gc != null) {
            this.dblpaint();//오프스크린 버퍼에 그리기
            g.drawImage(this.dblbuff, 0, 0, this);
        }
    }
    
	public void dblpaint(){
		//실제 그리는 동작은 이 함수에서 모두 행한다.
		switch(main.status){
		case 0:
//			Draw_TITLE();
//			gc.setColor(new Color(0));
//			gc.drawString("Education ver.", 10,40);
			
			break;
		case 2: //playing상태
			Draw_BG(); //배경화면 그리기
			Draw_item(); //아이템 그리기
			Draw_Block() ;
			Draw_WATER();
			Draw_BUBBLE(); //물풍선 그리기
			Draw_MY(); //캐릭터 그리기
			
			Draw_Hide();
			
			
//			Draw_BG();
//			Draw_MY();
//			Draw_BG2();
//			drawImageAnc(_start, 0,270, 3);
			break;
		case 4://게임오버
			
			break;
		case 3:
			
		default:
			break;
		}
	}
	
	public void Draw_BG(){ //배경화면 그리기
		gc.drawImage(bg,0,0,this);
	}
	
	public void Draw_Block(){ //블록 그리기
		int bkx=main.bkx; //좌표 가져오기
		int bky=main.bky;
		
		for(int i=0;i<13;i++) {
            for(int j=0;j<15;j++) {
               if(main.MapArray[i][j]==1) { //나무박스
            	   drawImageAnc(block[1], bkx*(j+1), bky*(i+1), 1);
               }
               else if(main.MapArray[i][j]==2) {//빨강블럭
            	   drawImageAnc(block[2], bkx*(j+1), bky*(i+1), 1);
               }
               else if(main.MapArray[i][j]==3) {//주황블럭
            	   drawImageAnc(block[3], bkx*(j+1), bky*(i+1), 1);
               }
               else if(main.MapArray[i][j]==4) {//빨강집 몸 (집,나무,부쉬는 살짝 올려줘야함)
            	   drawImageAnc(block[4], bkx*(j+1), bky*(i+1), 1);
               }
               else if(main.MapArray[i][j]==5) {//노랑집 몸
            	   drawImageAnc(block[5], bkx*(j+1), bky*(i+1), 1);
               }
               else if(main.MapArray[i][j]==6) {//파랑집 몸
            	   drawImageAnc(block[6], bkx*(j+1), bky*(i+1), 1);
               }
               else if(main.MapArray[i][j]==7) {//나무
            	   drawImageAnc(block[10], bkx*(j+1), (bky*(i+1))-30, 1);
               }
               else if(main.MapArray[i][j]==8) {//부쉬
            	   drawImageAnc(block[11], bkx*(j+1), (bky*(i+1))-25, 1);
               }
            }
         }
		
		
	}
	
	public void Draw_Hide(){ //플레이어가 가려지는 부분 그리기
		int bkx=main.bkx; //좌표 가져오기
		int bky=main.bky;
		
		for(int i=0;i<13;i++) {
            for(int j=0;j<15;j++) {
               if(main.MapArray[i][j]==4) {//빨강집
            	   drawImageAnc(block[7], bkx*(j+1), (bky*(i+1))-17, 1);
               }
               else if(main.MapArray[i][j]==5) {//노랑집
            	   drawImageAnc(block[8], bkx*(j+1), (bky*(i+1))-17, 1);
               }
               else if(main.MapArray[i][j]==6) {//파랑집
            	   drawImageAnc(block[9], bkx*(j+1), (bky*(i+1))-17, 1);
               }
               
            }
         }
		
		
	}
	
	public void Draw_MY(){ //플레이어 그리기
		
		//mymode : 플레이어 상태 
		// 2 : playing <<로 시작
		
		//myImg : 플레이어 이미지
		//0 wait 1-상 2-하 3-좌 4-우
		
		int myx,myy;
		myx=main.myx/100;
		myy=main.myy/100;
		switch(main.mymode){
		case 0://무적
		case 1://무적이면서 등장
			//if(main.cnt%20<10) drawImageAnc(chr[2+(main.cnt/5)%2], myx, myy, 4);
			break;
		case 2://온플레이
			if(main.myimg==0) drawImageAnc(chr, myx, myy, 4);
			else if(main.myimg==1) drawImageAnc(chrUp[cnt/4%8], myx, myy, 4);
			else if(main.myimg==2) drawImageAnc(chrDown[cnt/4%8], myx, myy, 4);
			else if(main.myimg==3) drawImageAnc(chrLeft[cnt/4%6], myx, myy, 4);
			else if(main.myimg==4) drawImageAnc(chrRight[cnt/4%6], myx, myy, 4);
			break;
		case 3://trap상태
			drawImageAnc(chrTrap[cnt/50%13], myx, myy, 4);
			break;
		}
	}
	
	public void Draw_item() {//아이템 그리기
		int bkx=main.bkx; //블럭좌표 가져오기
		int bky=main.bky;
		
		for(int i=0;i<13;i++) {
            for(int j=0;j<15;j++) {
               if(main.ItemArray[i][j]==1) { //스피드가 있는 부분
            	   drawImageAnc(speed[1], bkx*(j+1), (bky*(i+1))+5, 1);
               }
               else if(main.ItemArray[i][j]==2) {//물줄기가 있는 부분
            	   drawImageAnc(Bpower[1], bkx*(j+1), (bky*(i+1))+5, 1);
               }
               else if(main.ItemArray[i][j]==3) {//물풍선 최대 개수 부분
            	   drawImageAnc(Bmax[1], bkx*(j+1), (bky*(i+1))+5, 1);
               }
            }
         }
	}
	
	public void Draw_BUBBLE() {
//		 if(this.main.bubble.size()>=1)
//		 System.out.println((Bubble)this.main.bubble.elementAt(0));
			int myx,myy;
			myx=main.myx/100;
			myy=main.myy/100;

		for(int i = 0; i < this.main.bubble.size(); ++i) {
			
		   Bubble buff = (Bubble)this.main.bubble.elementAt(i);
		   //System.out.println((Bubble)this.main.bubble.elementAt(i));
		   drawImageAnc(bubble[main.gamecnt/50%4], buff.dis.x, buff.dis.y, 4);
		   //System.out.println(buff.dis);
		       
	    }
	}
	public void Draw_WATER() {
		
		int length = main.waterLength;
		
//		for(int i = 0; i < this.main.water.size(); ++i) {
//			
//			   Water water = (Water)this.main.water.elementAt(i);
//			   //System.out.println((Bubble)this.main.bubble.elementAt(i));
//			   drawImageAnc(bubble[main.gamecnt/50%4], buff.dis.x, buff.dis.y, 4);
//			       
//		    }
		// 1 - 가운데 pop
		// 2 - 상 중간, 3 - 상 말단, 4 - 하 중간, 5 - 하 말단
		// 6 - 좌 중간, 7 - 좌 말단, 8 - 우 중간, 8 - 우 말단
		
		for(int i=0;i<13;i++) {
            for(int j=0;j<15;j++) {
            	int num = main.WaterArray[i][j];
               if(num==1) {//가운데
            	   drawImageAnc(waterPop[main.gamecnt/waterCnt%6], (j+1)*52, (i+1)*52+24, 4);
               }
               else if(num==2) {//상 중간
            	   //System.out.println("================");
            	   drawImageAnc(waterUpM[main.gamecnt/waterCnt%9], (j+1)*52, (i+1)*52+24, 4);
               }
               else if(num==3) {//상 말단
            	   drawImageAnc(waterUpE[main.gamecnt/waterCnt%9], (j+1)*52, (i+1)*52+24,4);
               }
               else if(num==4) {//하 중간
            	   //System.out.println("================");
            	   drawImageAnc(waterDownM[main.gamecnt/waterCnt%9], (j+1)*52, (i+1)*52+24, 4);
               }
               else if(num==5) {//하 말단
            	   drawImageAnc(waterDownE[main.gamecnt/waterCnt%9], (j+1)*52, (i+1)*52+24,4);
               }
               else if(num==6) {//좌 중간
            	   //System.out.println("================");
            	   drawImageAnc(waterLeftM[main.gamecnt/waterCnt%9], (j+1)*52, (i+1)*52+24, 4);
               }
               else if(num==7) {//좌 말단
            	   drawImageAnc(waterLeftE[main.gamecnt/waterCnt%9], (j+1)*52, (i+1)*52+24,4);
               }
               else if(num==8) {//우 중간
            	   //System.out.println("================");
            	   drawImageAnc(waterRightM[main.gamecnt/waterCnt%9], (j+1)*52, (i+1)*52+24, 4);
               }
               else if(num==9) {//우 말단
            	   drawImageAnc(waterRightE[main.gamecnt/waterCnt%9], (j+1)*52, (i+1)*52+24,4);
               }
               
            }
         }
	   
		for(int i = 0; i < this.main.water.size(); ++i) {
			
		   Water water = (Water)this.main.water.elementAt(i);
		   //System.out.println((Bubble)this.main.bubble.elementAt(i));
		   
		   //System.out.println(i);
//		   drawImageAnc(waterPop[main.gamecnt/50%6], (water.dis.x)*5200, (water.dis.y)*5200, 4);
		   
		   
		   //drawImageAnc(waterPop[main.gamecnt/20%6], (water.dis.x+1)*52, (water.dis.y+1)*52+16,4);
		   
	    }
		
		
		
		
	}
	
	public void drawImageAnc(Image img, int x, int y, int anc){
		//앵커값을 참조해 이미지 출력 위치를 보정한다.
		//예) anc==0 : 좌상단이 기준, anc==4 : 이미지 중앙이 기준
		int imgw, imgh;
		imgw=img.getWidth(this);
		imgh=img.getHeight(this);
		x=x-(anc%3)*(imgw/2);
		y=y-(anc/3)*(imgh/2);
		
		gc.drawImage(img, x,y, this);
	}
	public void drawImageAnc(Image img, int x, int y, int sx,int sy, int wd,int ht, int anc){
		//sx,sy부터 wd,ht만큼 클리핑해서 그린다.
		if(x<0) {
			wd+=x;
			sx-=x;
			x=0;
		}
		if(y<0) {
			ht+=y;
			sy-=y;
			y=0;
		}
		if(wd<0||ht<0) return;
		x=x-(anc%3)*(wd/2);
		y=y-(anc/3)*(ht/2);
		gc.setClip(x, y, wd, ht);
		gc.drawImage(img, x-sx, y-sy, this);
		gc.setClip(0,0, main.gScreenWidth+10,main.gScreenHeight+30);
	}

}
