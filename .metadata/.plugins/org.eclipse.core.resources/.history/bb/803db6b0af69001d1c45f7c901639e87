
// JavaObjClientView.java ObjecStram 기반 Client
//실질적인 채팅 창
import java.awt.BorderLayout;
import java.awt.EventQueue;
import java.awt.FileDialog;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;
import java.awt.image.ImageObserver;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.net.Socket;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.JTextPane;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.SwingConstants;
import java.awt.Font;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Color;
import javax.swing.border.BevelBorder;
import javax.swing.border.LineBorder;
import javax.swing.JToggleButton;
import javax.swing.JList;
import java.awt.Canvas;
import javax.swing.border.TitledBorder;
import javax.swing.text.BadLocationException;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

public class ArcadeClientGameView extends JFrame implements KeyListener, Runnable{
	
	public static final int UP_PRESSED = 1;
    public static final int DOWN_PRESSED = 2;
    public static final int LEFT_PRESSED = 4;
    public static final int RIGHT_PRESSED = 8;
    public static final int FIRE_PRESSED = 16;

    GameScreen gamescreen;
    Thread mainwork;
    boolean roof = true;
    
    int status;
    int cnt;
    int delay;
    int keybuff;
    
    int gamecnt;
    
    
    int gScreenWidth = 1045;
    int gScreenHeight = 785;
    
	
	
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private JPanel contentPane;
	private String UserName;
	private static final int BUF_LEN = 128; // Windows 처럼 BUF_LEN 을 정의
	private Socket socket; // 연결소켓
	private InputStream is;
	private OutputStream os;
	private DataInputStream dis;
	private DataOutputStream dos;

	private ObjectInputStream ois;
	private ObjectOutputStream oos;

	private Frame frame;
	private FileDialog fd;
	private JLabel lblMouseEvent;
	private Graphics gc;
	private int pen_size = 2; // minimum 2
	// 그려진 Image를 보관하는 용도, paint() 함수에서 이용한다.
	private Image panelImage = null; 
	private Graphics gc2 = null;
	
	//private ImageIcon backGround = new ImageIcon("play_bg.png"); //이미지 로딩
	//private Image bG = backGround.getImage(); //이미지 객체 생성

	private Image background=new ImageIcon("play_bg.png").getImage();//배경이미지

	
	/**
	 * Create the frame.
	 * @throws BadLocationException 
	 */
	public ArcadeClientGameView(String username, String ip_addr, String port_no)  {
		//생성자 --------------------------------------------------
		
		showFrame();
		UserName = username;
		
		this.gamescreen = new GameScreen(this);
        this.gamescreen.setBounds(0, 0, this.gScreenWidth, this.gScreenHeight);
        this.add(this.gamescreen);
        this.systeminit();
        this.initialize();
		
		
		
		try {
			socket = new Socket(ip_addr, Integer.parseInt(port_no));
//			is = socket.getInputStream();
//			dis = new DataInputStream(is);
//			os = socket.getOutputStream();
//			dos = new DataOutputStream(os);

			oos = new ObjectOutputStream(socket.getOutputStream());
			oos.flush();
			ois = new ObjectInputStream(socket.getInputStream());

		} catch (NumberFormatException | IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			
		}

	} // 생성자 끝 -----------------------------------------------------------
   
	public void systeminit() {
        this.status = 0;
        this.cnt = 0;
        this.delay = 17;
        this.keybuff = 0;
        this.mainwork = new Thread(this);
        this.mainwork.start();
    }

    public void initialize() {
        //this.Init_TITLE();
        this.gamescreen.repaint();
    }
	
    
	class ListenNetwork extends Thread { //네트워크 관련 스레드 -------------------
		public void run() {
			while (true) {
				try {

					Object obcm = null;
					String msg = null;
					ChatMsg cm;
					try {
						obcm = ois.readObject();
					} catch (ClassNotFoundException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
						break;
					}
					if (obcm == null)
						break;
					if (obcm instanceof ChatMsg) {
						cm = (ChatMsg) obcm;
						msg = String.format("[%s]\n%s", cm.UserName, cm.data);
					} else
						continue;
					
				} catch (IOException e) {
					//AppendText("ois.readObject() error");
					try {
//						dos.close();
//						dis.close();
						ois.close();
						oos.close();
						socket.close();

						break;
					} catch (Exception ee) {
						break;
					} // catch문 끝
				} // 바깥 catch문끝

			}
		}
	}//-----------------------------------------------------------------------------
	
	public void showFrame() { //프레임 그리기------------------------------------------
		setTitle("게임방"); //프레임 타이틀 지정
		setSize(1045,785);//프레임 크기
		setResizable(false); //창크기 변경불가
		setLocationRelativeTo(null);//창 가운데 뜨게
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setLayout(null);
		setVisible(true);
	}
	
	public void paint(Graphics g) {//배경 그리는 함수
		g.drawImage(background, 0, 0, null);
	}
	
	//프레임 관련 끝-------------------------------------------------------------------

	// 게임 돌리는 스레드 ==============================================================
	@Override
	public void run() {
		// TODO Auto-generated method stub
		
	}

	//==============================================================================
	
	@Override
	public void keyTyped(KeyEvent e) { //문자를 눌렀을 때 호출, 문자키에만 반응
		//따라서 안 쓸 거
	}


	@Override
	public void keyPressed(KeyEvent e) { //키보드를 눌렀을 때 호출, 모든 키보드에 반응
		
		
	}


	@Override
	public void keyReleased(KeyEvent e) { //키보드를 떼었을 때, 모든 키보드에 반응
		// TODO Auto-generated method stub
		
	}

	

}
